import { Command } from 'commander';
import chalk from 'chalk';
import dotenv from 'dotenv';
import { init } from './core/init';
import { validate } from './core/validate';
import { deploy } from './core/deploy';
import { registerPlugin } from './core/plugins';
import { on, emit } from './core/events';

// Carregar vari√°veis de ambiente
dotenv.config();

// Criar CLI
const program = new Command();

program
  .name('cerebro-operante')
  .description('Framework de Produ√ß√£o Universal para desenvolvimento de software')
  .version('1.0.0');

// Comando init
program
  .command('init')
  .description('Inicializa o C√©rebro Operante no projeto')
  .option('-c, --config <path>', 'Caminho para o arquivo de configura√ß√£o')
  .action(async (options) => {
    try {
      console.log(chalk.blue('üß† Inicializando C√©rebro Operante...'));
      await init(options);
      console.log(chalk.green('‚úÖ Inicializa√ß√£o conclu√≠da!'));
    } catch (error) {
      console.error(chalk.red('‚ùå Erro na inicializa√ß√£o:'), error);
      process.exit(1);
    }
  });

// Comando validate
program
  .command('validate')
  .description('Valida o c√≥digo do projeto')
  .option('-p, --path <path>', 'Caminho para validar')
  .option('-r, --report', 'Gerar relat√≥rio detalhado')
  .action(async (options) => {
    try {
      console.log(chalk.blue('üîç Validando c√≥digo...'));
      const result = await validate(options);
      console.log(chalk.green('‚úÖ Valida√ß√£o conclu√≠da!'));
      if (options.report) {
        console.log(JSON.stringify(result, null, 2));
      }
    } catch (error) {
      console.error(chalk.red('‚ùå Erro na valida√ß√£o:'), error);
      process.exit(1);
    }
  });

// Comando deploy
program
  .command('deploy')
  .description('Realiza deploy do projeto')
  .option('-e, --env <environment>', 'Ambiente de deploy')
  .option('-f, --force', 'For√ßar deploy sem confirma√ß√£o')
  .action(async (options) => {
    try {
      console.log(chalk.blue('üöÄ Iniciando deploy...'));
      const result = await deploy(options);
      console.log(chalk.green('‚úÖ Deploy conclu√≠do!'));
      console.log(chalk.blue('üìä M√©tricas:'), result.metrics);
    } catch (error) {
      console.error(chalk.red('‚ùå Erro no deploy:'), error);
      process.exit(1);
    }
  });

// Comando plugin
program
  .command('plugin')
  .description('Gerencia plugins do C√©rebro Operante')
  .option('-a, --add <name>', 'Adicionar plugin')
  .option('-r, --remove <name>', 'Remover plugin')
  .option('-l, --list', 'Listar plugins instalados')
  .action(async (options) => {
    try {
      if (options.add) {
        console.log(chalk.blue(`üì¶ Instalando plugin: ${options.add}`));
        await registerPlugin(options.add);
        console.log(chalk.green('‚úÖ Plugin instalado!'));
      } else if (options.remove) {
        console.log(chalk.blue(`üóëÔ∏è Removendo plugin: ${options.remove}`));
        // Implementar remo√ß√£o de plugin
        console.log(chalk.green('‚úÖ Plugin removido!'));
      } else if (options.list) {
        console.log(chalk.blue('üìã Plugins instalados:'));
        // Implementar listagem de plugins
      }
    } catch (error) {
      console.error(chalk.red('‚ùå Erro na opera√ß√£o:'), error);
      process.exit(1);
    }
  });

// Exportar API
export {
  init,
  validate,
  deploy,
  registerPlugin,
  on,
  emit
};

// Executar CLI se chamado diretamente
if (require.main === module) {
  program.parse(process.argv);
} 